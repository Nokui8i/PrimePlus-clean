generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  username    String   @unique
  name        String?
  nickname    String?
  password    String
  bio         String?
  avatar      String?
  coverImage  String?
  role        UserRole @default(USER)
  isVerified  Boolean  @default(false)
  isModerator Boolean  @default(false)
  isOnline    Boolean  @default(false)
  lastSeen    DateTime @default(now())
  profileUrl  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts             Post[]             @relation("UserPosts")
  reportsMade       Report[]           @relation("ReportedBy")
  reportsHandled    Report[]           @relation("ModeratedBy")
  warningsGiven     Warning[]          @relation("WarningsGiven")
  warningsReceived  Warning[]          @relation("WarningsReceived")
  subscriptionTiers SubscriptionTier[] @relation("CreatorTiers")
  creatorProfile    CreatorProfile?
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  content   String
  type      String   @default("text")
  isPremium Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User   @relation("UserPosts", fields: [authorId], references: [id])
  authorId String @db.ObjectId
}

model SubscriptionTier {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  price        Float
  duration     Int // in days
  contentTypes String[] // Array of content type IDs
  isActive     Boolean  @default(true)
  creatorId    String   @db.ObjectId
  creator      User     @relation("CreatorTiers", fields: [creatorId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([creatorId])
}

model CreatorProfile {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  userId               String    @db.ObjectId
  user                 User      @relation(fields: [userId], references: [id])
  bio                  String?
  website              String?
  socialLinks          Json?
  isVerified           Boolean   @default(false)
  verifiedAt           DateTime?
  identityVerified     Boolean   @default(false)
  identityVerifiedAt   DateTime?
  termsVerified        Boolean   @default(false)
  termsVerifiedAt      DateTime?
  feesVerified         Boolean   @default(false)
  feesVerifiedAt       DateTime?
  idDocumentUploaded   Boolean   @default(false)
  idDocumentUploadedAt DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@unique([userId])
}

model Report {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  type         String // 'post' | 'comment' | 'message'
  contentId    String
  content      String
  reason       String
  status       String    @default("pending") // 'pending' | 'resolved'
  action       String? // 'approved' | 'removed' | 'warned'
  reportedAt   DateTime  @default(now())
  resolvedAt   DateTime?
  reportedBy   User      @relation("ReportedBy", fields: [reportedById], references: [id])
  reportedById String    @db.ObjectId
  moderator    User?     @relation("ModeratedBy", fields: [moderatorId], references: [id])
  moderatorId  String?   @db.ObjectId

  @@index([reportedById])
  @@index([moderatorId])
}

model Warning {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  reason      String
  createdAt   DateTime @default(now())
  moderator   User     @relation("WarningsGiven", fields: [moderatorId], references: [id])
  moderatorId String   @db.ObjectId
  user        User     @relation("WarningsReceived", fields: [userId], references: [id])

  @@index([userId])
  @@index([moderatorId])
}
