generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  vrContent     VRContent[]
  subscriptions Subscription[]
  followers     Follow[]    @relation("following")
  following     Follow[]    @relation("follower")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String   @id @default(cuid())
  title     String?
  content   String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String

  author    User     @relation(fields: [authorId], references: [id])
  media     Media[]
}

model Media {
  id          String   @id @default(cuid())
  type        String   // image, video, vr
  url         String
  price       Float?
  postId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model VRContent {
  id                    String      @id @default(cuid())
  title                 String
  description          String
  contentType          String      // '360-image' | '360-video' | 'vr-room'
  isPremium            Boolean     @default(false)
  price                Float       @default(0)
  tags                 String[]
  environment          String      @default("default")
  mediaUrl             String
  thumbnailUrl         String
  hotspots             Json[]      // Array of hotspot objects
  authorId             String
  author               User        @relation(fields: [authorId], references: [id])
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  viewCount            Int         @default(0)
  likeCount            Int         @default(0)
  isPublished          Boolean     @default(false)
  requiredSubscriptionTier String?

  @@index([authorId])
  @@index([contentType])
  @@index([isPublished])
  @@index([createdAt])
}

model Subscription {
  id        String   @id @default(cuid())
  creatorId String
  userId    String
  price     Float
  startDate DateTime @default(now())
  endDate   DateTime

  creator   User     @relation(fields: [creatorId], references: [id])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
} 